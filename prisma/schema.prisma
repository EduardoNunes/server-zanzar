generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
  id        String     @id @default(uuid())
  profileId String
  mediaUrl  String
  caption   String?
  isPublic  Boolean    @default(false)
  createdAt DateTime   @default(now())
  likes     Likes[]
  comments  Comments[]
  profile   Profiles   @relation(fields: [profileId], references: [id])

  categoryId String?
  category   Categories? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  order Int // Coluna sem uso, foi colocando p/ ordenar os posts na exibição

  likesCount    Int @default(0) // Nova coluna com valor padrão 0
  commentsCount Int @default(0) // Nova coluna com valor padrão 0
}

model Likes {
  id        String   @id @default(uuid())
  postId    String
  profileId String
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id])
  profile   Profiles @relation(fields: [profileId], references: [id])
}

model Followers {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  Profiles @relation("FollowerRelation", fields: [followerId], references: [id])
  following Profiles @relation("FollowingRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model DirectMessages {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  sender     Profiles @relation("Sender", fields: [senderId], references: [id])
  receiver   Profiles @relation("Receiver", fields: [receiverId], references: [id])
}

model Profiles {
  id               String             @id @default(uuid())
  userId           String             @unique
  username         String             @unique
  avatarUrl        String?
  createdAt        DateTime           @default(now())
  role             String
  lastSignInAt     DateTime?
  posts            Posts[]
  likes            Likes[]
  comments         Comments[]
  followers        Followers[]        @relation("FollowerRelation")
  following        Followers[]        @relation("FollowingRelation")
  sentMessages     DirectMessages[]   @relation("Sender")
  receivedMessages DirectMessages[]   @relation("Receiver")
  adViews          AdViews[]
  user             User               @relation(fields: [userId], references: [id])
  chatParticipants ChatParticipants[]
  chatMessages     ChatMessages[]
  chatReadStatus   ChatReadStatus[]
  followersCount   Int                @default(0)
  followingCount   Int                @default(0)
  totalPosts       Int                @default(0)
  hasUserStore     Boolean            @default(false)

  receivedNotifications Notification[] @relation("ProfileNotifications")
  sentNotifications     Notification[] @relation("SenderNotifications")

  invitesSent Invite[] @relation("Inviter")
  invites     Int      @default(0)

  categories Categories[] // Relação 1 para N com Categories
  favoriteStores FavoriteStore[]

  addressId   String?   @unique
  address     Address?  @relation(fields: [addressId], references: [id])
  userStore       UserStore?

}

model Address {
  id         String     @id @default(uuid())
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  country    String
  zipCode    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  profile    Profiles?
  userStore   UserStore? @relation("StoreAddress")
}

model Comments {
  id        String   @id @default(uuid())
  postId    String
  profileId String
  content   String
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id])
  profile   Profiles @relation(fields: [profileId], references: [id])
}

model AdViews {
  id         String    @id @default(uuid())
  adId       String
  profileId  String
  viewedAt   DateTime  @default(now())
  quantView  Int       @default(1) // Conta quantas vezes o usuário viu a propaganda
  lastView   DateTime? // Última visualização registrada
  manyClicks Int       @default(0) // Conta quantos cliques o usuário deu no anúncio

  ad      Advertisements @relation(fields: [adId], references: [id])
  profile Profiles       @relation(fields: [profileId], references: [id])
}

model Advertisements {
  id            String    @id @default(uuid())
  title         String
  description   String?
  mediaUrl      String?
  mediaType     String?
  linkUrl       String?
  startDate     DateTime
  endDate       DateTime
  dailyLimit    Int?
  scheduleStart DateTime?
  scheduleEnd   DateTime?
  showOnStartup Boolean   @default(false)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  totalViews  Int @default(0) // Conta o total de visualizações do anúncio
  totalClicks Int @default(0) // Conta o total de cliques no anúncio

  userLimitShow Int? // Número máximo de vezes que um usuário pode ver o anúncio
  timeInterval  Int? // Intervalo de tempo (em minutos) entre as exibições para o mesmo usuário

  adViews AdViews[] // Relacionamento com AdViews
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  profile  Profiles? @relation
}

model ChatConversation {
  id           String             @id @default(uuid())
  name         String?
  isGroup      Boolean            @default(false)
  createdAt    DateTime           @default(now())
  participants ChatParticipants[]
  messages     ChatMessages[]
}

model ChatParticipants {
  profileId      String
  conversationId String
  joinedAt       DateTime         @default(now())
  profile        Profiles         @relation(fields: [profileId], references: [id])
  conversation   ChatConversation @relation(fields: [conversationId], references: [id])

  @@id([profileId, conversationId])
}

model ChatMessages {
  id             String           @id @default(uuid())
  content        String
  createdAt      DateTime         @default(now())
  conversationId String
  profileId      String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id])
  profile        Profiles         @relation(fields: [profileId], references: [id])
  readStatus     ChatReadStatus[]
}

model ChatReadStatus {
  messageId String
  profileId String
  readAt    DateTime     @default(now())
  message   ChatMessages @relation(fields: [messageId], references: [id])
  profile   Profiles     @relation(fields: [profileId], references: [id])

  @@id([messageId, profileId])
}

model Notification {
  id           String   @id @default(uuid())
  type         String // "like", "comment", "message"
  content      String
  senderId     String // ID do remetente (quem gerou a notificação)
  receiverId   String // ID do destinatário (perfil que recebe a notificação)
  referenceId  String? // ID do item relacionado (postagem, comentário, chat)
  referenceUrl String? // URL opcional para redirecionamento direto
  createdAt    DateTime @default(now())
  isRead       Boolean  @default(false)

  receiver Profiles @relation("ProfileNotifications", fields: [receiverId], references: [id])

  sender Profiles @relation("SenderNotifications", fields: [senderId], references: [id])

  @@map("notifications")
}

model Invite {
  id         String    @id @default(uuid())
  inviterId  String
  email      String    @unique
  status     String    @default("pending")
  sentAt     DateTime  @default(now())
  acceptedAt DateTime?

  inviter Profiles @relation("Inviter", fields: [inviterId], references: [id])
}

model Categories {
  id         String   @id @default(uuid())
  profileId  String
  categories String
  profile    Profiles @relation(fields: [profileId], references: [id], onDelete: Cascade)
  posts      Posts[]

  @@index([profileId]) // Índice para otimizar buscas por profileId
}

model UserStore {
  id                    String    @id @default(uuid())
  profileId             String    @unique
  addressId             String?   @unique // Relação opcional com endereço
  name                  String
  slug                  String    @unique
  description           String?
  logoUrl               String?
  bannerUrl             String?
  rating                Int       @default(0)
  ratingCount           Int       @default(0)
  totalFavoriters       Int       @default(0)
  totalProducts         Int       @default(0)
  totalSales            Int       @default(0)
  totalRevenue          Int       @default(0)
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt  

  lastSubscriptionPayment DateTime?  // Última mensalidade paga
  subscriptionAmount       Int?      // Valor da mensalidade (em centavos, se for tipo currency)
  productFeePercentage     Int?    // Porcentagem cobrada por produto vendido

  profile               Profiles  @relation(fields: [profileId], references: [id])
  address               Address?  @relation("StoreAddress", fields: [addressId], references: [id])
  products              Product[]
  favoritedBy      FavoriteStore[]
}

model FavoriteStore {
  id         String     @id @default(uuid())
  profileId  String
  storeId    String
  createdAt  DateTime   @default(now())

  profile    Profiles   @relation(fields: [profileId], references: [id])
  store      UserStore  @relation(fields: [storeId], references: [id])

  @@unique([profileId, storeId])
}

model Product {
  id                   String              @id @default(uuid())
  name                 String
  description          String
  totalSold            Int                 @default(0)
  rating               Int                 @default(0)
  ratingCount          Int                 @default(0)
  userStoreId          String
  userStore            UserStore           @relation(fields: [userStoreId], references: [id])
  productSubCategoryId String
  productSubCategory   ProductSubCategory  @relation(fields: [productSubCategoryId], references: [id])
  variations           ProductVariant[]
}

model ProductCategory {
  id              String               @id @default(uuid())
  name            String
  normalizedName  String               @unique
  subcategories   ProductSubCategory[]
}

model ProductSubCategory {
  id              String           @id @default(uuid())
  name            String
  normalizedName  String
  categoryId      String
  category        ProductCategory  @relation(fields: [categoryId], references: [id])
  products        Product[]

  @@unique([normalizedName, categoryId])
}

model ProductVariant {
  id         String        @id @default(uuid())
  colorName  String
  colorCode  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productId  String

  product    Product       @relation(fields: [productId], references: [id])
  images     ProductImage[]
  sizes      ProductVariantSize[]
}

model ProductVariantSize {
  id          String    @id @default(uuid())
  variantId   String
  size        String
  stock       Int
  price       Int
  basePrice   Int

  variant     ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id             String          @id @default(uuid())
  url            String
  variantId      String
  position       Int
  variant        ProductVariant  @relation(fields: [variantId], references: [id])
}
