generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts { 
  id        String     @id @default(uuid())
  profileId String
  mediaUrl  String
  caption   String?
  isPublic  Boolean    @default(false)
  createdAt DateTime   @default(now())
  likes     Likes[]
  comments  Comments[]
  profile   Profiles   @relation(fields: [profileId], references: [id])
}

model Likes {
  id        String   @id @default(uuid())
  postId    String
  profileId String
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id])
  profile   Profiles @relation(fields: [profileId], references: [id])
}

model Followers {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    Profiles @relation("FollowerRelation", fields: [followerId], references: [id])
  following   Profiles @relation("FollowingRelation", fields: [followingId], references: [id])
}

model DirectMessages {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  sender     Profiles @relation("Sender", fields: [senderId], references: [id])
  receiver   Profiles @relation("Receiver", fields: [receiverId], references: [id])
}

model Profiles {
  id               String           @id @default(uuid())
  userId           String           @unique
  username         String
  avatarUrl        String?
  createdAt        DateTime         @default(now())
  role             String
  lastSignInAt     DateTime?
  posts            Posts[]
  likes            Likes[]
  comments         Comments[]
  followers        Followers[]      @relation("FollowerRelation")
  following        Followers[]      @relation("FollowingRelation")
  sentMessages     DirectMessages[] @relation("Sender")
  receivedMessages DirectMessages[] @relation("Receiver")
  adViews          AdViews[]
  adClicks         AdClicks[]

  user User @relation(fields: [userId], references: [id])
}

model Comments {
  id        String   @id @default(uuid())
  postId    String
  profileId String
  content   String
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id])
  profile   Profiles @relation(fields: [profileId], references: [id])
}

model Products {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdViews {
  id       String         @id @default(uuid())
  adId     String
  profileId String
  viewedAt DateTime       @default(now())
  ad       Advertisements @relation(fields: [adId], references: [id])
  profile  Profiles       @relation(fields: [profileId], references: [id])
}

model AdClicks {
  id        String         @id @default(uuid())
  adId      String
  profileId String
  clickedAt DateTime       @default(now())
  ad        Advertisements @relation(fields: [adId], references: [id])
  profile   Profiles       @relation(fields: [profileId], references: [id])
}

model Advertisements {
  id            String     @id @default(uuid())
  title         String
  description   String
  mediaUrl      String
  mediaType     String
  linkUrl       String
  startDate     DateTime
  endDate       DateTime
  dailyLimit    Int?
  scheduleStart DateTime?
  scheduleEnd   DateTime?
  showOnStartup Boolean    @default(false)
  active        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  adViews       AdViews[]
  adClicks      AdClicks[]
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  profile  Profiles? @relation
}
